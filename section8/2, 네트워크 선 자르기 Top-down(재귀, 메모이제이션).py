'''
Top-down방식 동적계획법
 * 재귀 + 메모이제이션

 * ex:
    네트워크 선 7 이 주어져있으면
    DFS(7)
    => 7m짜리 네트워크 선이 주어지면 1미터나 2미터짜리로 자르는 방법의 수를 구한다.
            마지막이 1m이면  앞에 6m가 남으니까 그 경우의 수를 구하면 된다. => dfs(6)
            마지막이 2m이면  앞에 5m가 남으니까 그 경우의 수를 구하면 된다. => dfs(5)
            DFS(7) = dfs(6) + dfs(5)!
            
    이런식으로 쭉 전위순회해서
    직관적으로 알 수 있는 dfs(2): 2 return, dfs(1): 1 return 까지 들어가면
    dfs(3)은 dfs(2) + dfs(1)인 3이된다. 그리고 이 구한 값을 dy배열에 저장해놓는다.
    이런식으로 하면 다음에 dfs(3)이 나왔을 때는 dfs하지 않고 dy배열을 값을 사용하면 된다.

    이렇게 이미 한번 구해진 것은 메모를 해놓고 다음에 불필요한 재귀호출을 방지하는 것이
    => 메모이제이션!!!!!!!!!
'''

#answer 
def dfs(m):
    if dy[m] > 0:
        return dy[m]
    if m == 1 or m == 2:
        return m
    else:
        dy[m] = dfs(m-1) + dfs(m-2)
        return dy[m]

n = 7
dy = [0] * (n+1)
print(dfs(7))
